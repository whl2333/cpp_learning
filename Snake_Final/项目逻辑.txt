使用view和service架构，所有在view层的函数只是单纯负责显示的，service负责处理其余逻辑。
以菜单界面menuPage为例，函数menuPage（）单纯负责显示开始游戏，游戏设置等按钮，
而判断按钮是否有被按下以及按下之后发生什么事情的逻辑是由menuClickCheck负责实现的。
有些xxxClickCheck的实现可能比较复杂，但它们做的事其实都是一样的：判断有没有鼠标点击，
如果有，看点到了哪个按钮上，然后修改对应的数据或者执行对应的操作。比如我在菜单界面点击到了
“退出登陆”按钮，那么对应的操作就是把pageFlag设置为HOME_PAGE，这样return到controller之后
就可以在下次跳转到首页了。

所以在本架构中，所有的页面要实现的功能都由两个函数负责实现(游戏运行界面除外)，
也就是xxxxPage+xxxxClickCheck，一个负责显示，一个负责处理IO事件和IO事件发生后对应的逻辑。
因此我们可以认为某个页面 = xxxxPage+xxxxClickCheck

页面之间的跳转由controller实现，逻辑很简单，就是用pageFlag标识即将要跳转到的页面，然后用switch检测
当前pageFlag的值就可以跳转到相关的xxxPage+xxxClickCheck对应的case中。将整个 switch case语句用while(1)
循环包括就可以实现游戏的一直运行。



数据结构的设计逻辑：

蛇对象
存储蛇当前的长度，前进方向等参数，提供不同状况下蛇的移动函数(吃到食物/吃到道具/啥都没吃到正常走)

关卡对象
（因为不同关卡的初始参数不同，所以设置了关卡对象）
存储了关卡的初始速度等关卡的属性，提供了生成关卡地图的方法mapGenerate（）

玩家对象
存储玩家的用户名，密码，得分和耗时等属性，提供了创建账号，检测账号合法性等方法

 
*游戏运行界面的逻辑： 直接看runGame（）这个函数，几乎每一行都标了注释，下面再笼统的讲一下

刚开始进入游戏首先要创建并初始化一个player对象，之后进入每个关卡前要根据进入关卡的方式创建关卡对象和蛇对象
（进入方式有重新开始本关和开始下一关2种），从while循环开始就是正式进入游戏了，进入游戏首先要使用mapGenerate生成关卡
地图的底层数据(包括了蛇，食物，道具，障碍物，空地，边界，也就是主游戏界面)，然后gameview(...)就可以根据地图的底层数据显示
出游戏界面当前的样子。之后我们就要用gameEventCheck检测用户输入的方向来确定蛇下一步将要走到哪里，然后就可以根据这个来
调用相关方法更新相关属性。比如下一步走到的地方有食物，那么我们就调用蛇吃食物的相关方法，该方法就会帮助我们完成蛇身长度，
得分，耗时等属性的更新。

说白了这个while就是 更新map+根据map显示地图的过程，后续的gameEventCheck和switch语句的作用都是为了更新下一个时刻的map。
之后的判断有没有过这一关，游戏结束写入记录的逻辑应该比较好理解，就不赘述了。

